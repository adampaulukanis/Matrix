!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
MatrixIterator	index.js	/^class MatrixIterator {$/;"	C
assert	testMatrix.js	/^import { strict as assert } from 'assert';$/;"	I
describe	testMatrix.js	/^  describe('constructor', function () {$/;"	M
describe	testMatrix.js	/^  describe('get', function () {$/;"	M
describe	testMatrix.js	/^  describe('iterator', function () {$/;"	M
describe	testMatrix.js	/^  describe('set', function () {$/;"	M
describe	testMatrix.js	/^  describe('toString', function () {$/;"	M
describe	testMatrix.js	/^describe('Matrix', function () {$/;"	M
it	testMatrix.js	/^    it('looping over a matrix with for\/of loop', function () {$/;"	M
it	testMatrix.js	/^    it('retrieves the correct value', function () {$/;"	M
it	testMatrix.js	/^    it('should work', function () {$/;"	M
it	testMatrix.js	/^    it('the output is a string', function () {$/;"	M
it	testMatrix.js	/^    it('works', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when x is bigger than width', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when x is smaller than 0', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when y is bigger than height', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when y is smaller than 0', function () {$/;"	M
it	testMatrix.js	/^    it('you can chain it', function () {$/;"	M
m	testMatrix.js	/^      let m = new Matrix(2, 2, (x, y) => `hi hi ${x} ${y}`);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 2, (x, y) => `value ${x}, ${y}`);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 2, (x, y) => `value ${x}, ${y}`);$/;"	V
napis	testMatrix.js	/^      let napis = new Matrix(3, 3, (x, y) => `(${x} ${y})`).toString();$/;"	F
napis	testMatrix.js	/^      let napis = new Matrix(3, 3, (x, y) => `(${x} ${y})`).toString();$/;"	V
output	index.js	/^		let output = '';$/;"	V
temp	testMatrix.js	/^      let temp = new Matrix(1, 1);$/;"	V
temp	testMatrix.js	/^      let temp = new Matrix(1, 1, (x, y) => `Matrix${x} ${y}`);$/;"	F
temp	testMatrix.js	/^      let temp = new Matrix(1, 1, (x, y) => `Matrix${x} ${y}`);$/;"	V
temp	testMatrix.js	/^      let temp = new Matrix(2, 2);$/;"	V
value	index.js	/^		let value = {$/;"	O
