!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
MatrixIterator	index.js	/^class MatrixIterator {$/;"	C
assert	testMatrix.js	/^import { strict as assert } from 'assert';$/;"	I
counter	testMatrix.js	/^        let counter = 0;$/;"	V
counter	testMatrix.js	/^      let counter = 1;$/;"	V
describe	testMatrix.js	/^    describe('rotateRight n x m matrix', function () {$/;"	M
describe	testMatrix.js	/^    describe('rotateRight n x n matrix', function () {$/;"	M
describe	testMatrix.js	/^  describe('addColumn', function () {$/;"	M
describe	testMatrix.js	/^  describe('addRow', function () {$/;"	M
describe	testMatrix.js	/^  describe('constructor', function () {$/;"	M
describe	testMatrix.js	/^  describe('get', function () {$/;"	M
describe	testMatrix.js	/^  describe('isInside', function () {$/;"	M
describe	testMatrix.js	/^  describe('iterator', function () {$/;"	M
describe	testMatrix.js	/^  describe('rotateLeft', function () {$/;"	M
describe	testMatrix.js	/^  describe('rotateRight', function () {$/;"	M
describe	testMatrix.js	/^  describe('set', function () {$/;"	M
describe	testMatrix.js	/^  describe('toString', function () {$/;"	M
describe	testMatrix.js	/^describe('Matrix', function () {$/;"	M
expectedMatrix	testMatrix.js	/^        const expectedMatrix = new Matrix(1, 4, (x, y) => y + 1);$/;"	F
expectedMatrix	testMatrix.js	/^        const expectedMatrix = new Matrix(1, 4, (x, y) => y + 1);$/;"	V
expectedMatrix	testMatrix.js	/^        const expectedMatrix = new Matrix(4, 1, (x, y) => {$/;"	F
expectedMatrix	testMatrix.js	/^        const expectedMatrix = new Matrix(4, 1, (x, y) => {$/;"	V
it	testMatrix.js	/^      it('matrix(n, m).rotateRight() when n < m', function () {$/;"	M
it	testMatrix.js	/^      it('matrix(n, m).rotateRight() when n > m', function () {$/;"	M
it	testMatrix.js	/^      it('rotates to the right', function () {$/;"	M
it	testMatrix.js	/^      it('rotates twice', function () {$/;"	M
it	testMatrix.js	/^    it('Matrix looks like this [1 2 3]', function () {$/;"	M
it	testMatrix.js	/^    it('Matrix looks like this |1|\\\\n|2|\\\\n|3|', function () {$/;"	M
it	testMatrix.js	/^    it('first parameter must be an array and of the right size', function () {$/;"	M
it	testMatrix.js	/^    it('first parameter must be an array', function () {$/;"	M
it	testMatrix.js	/^    it('first parameter must be of size exactly same as height of matrix', function () {$/;"	M
it	testMatrix.js	/^    it('if first parameter is array of different length than height of matrix it throws', function () {$/;"	M
it	testMatrix.js	/^    it('if first parameter is not array it throws', function () {$/;"	M
it	testMatrix.js	/^    it('if the second parameter is < 0 it throws', function () {$/;"	M
it	testMatrix.js	/^    it('if the second parameter is > width than it throws', function () {$/;"	M
it	testMatrix.js	/^    it('looping over a matrix with for\/of loop', function () {$/;"	M
it	testMatrix.js	/^    it('matrix(0, 0)', function () {$/;"	M
it	testMatrix.js	/^    it('matrix(1, 3).addColumn([x, y, z]) adds a new column', function () {$/;"	M
it	testMatrix.js	/^    it('matrix(1, 4).addRow([a], 2) adds a new row', function () {$/;"	M
it	testMatrix.js	/^    it('matrix(4, 1).addColumn([x]) adds a new column', function () {$/;"	M
it	testMatrix.js	/^    it('matrix(n, m).rotateLeft() when n < m', function () {$/;"	M
it	testMatrix.js	/^    it('matrix(n, m).rotateLeft() when n > m', function () {$/;"	M
it	testMatrix.js	/^    it('matrix(n, n).rotateLeft()', function () {$/;"	M
it	testMatrix.js	/^    it('retrieves the correct value', function () {$/;"	M
it	testMatrix.js	/^    it('second parameter defaults to the last column', function () {$/;"	M
it	testMatrix.js	/^    it('should work', function () {$/;"	M
it	testMatrix.js	/^    it('the output is a string', function () {$/;"	M
it	testMatrix.js	/^    it('the point is inside', function () {$/;"	M
it	testMatrix.js	/^    it('the point is outside', function () {$/;"	M
it	testMatrix.js	/^    it('with two parametes the second one is the position', function () {$/;"	M
it	testMatrix.js	/^    it('works', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when x is bigger than width', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when x is smaller than 0', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when y is bigger than height', function () {$/;"	M
it	testMatrix.js	/^    it('wrong parameters throw when y is smaller than 0', function () {$/;"	M
it	testMatrix.js	/^    it('you can chain it', function () {$/;"	M
m	testMatrix.js	/^      let m = new Matrix(2, 2, (x, y) => `hi hi ${x} ${y}`);$/;"	V
matrix	index.js	/^		let matrix = new Matrix(this.height, this.width);$/;"	V
matrix	testMatrix.js	/^        const matrix = new Matrix(1, 4, (x, y) => {$/;"	F
matrix	testMatrix.js	/^        const matrix = new Matrix(1, 4, (x, y) => {$/;"	V
matrix	testMatrix.js	/^        const matrix = new Matrix(4, 1, (x, y) => ++counter);$/;"	F
matrix	testMatrix.js	/^        const matrix = new Matrix(4, 1, (x, y) => ++counter);$/;"	V
matrix	testMatrix.js	/^        let matrix = new Matrix(4, 4, (x, y) => {$/;"	F
matrix	testMatrix.js	/^        let matrix = new Matrix(4, 4, (x, y) => {$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(0, 0);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 1, (x, y) => counter++);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 1, (x, y) => counter++);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 2);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 3, (x, y) => x + y + 7);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 3, (x, y) => x + y + 7);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 3, (x, y) => y + 1);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 3, (x, y) => y + 1);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 4, (x, y) => counter++);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(1, 4, (x, y) => counter++);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(10, 10, (x, y) => `${x}x${y}`);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(10, 10, (x, y) => `${x}x${y}`);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 2);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 2, (x, y) => `value ${x}, ${y}`);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 2, (x, y) => `value ${x}, ${y}`);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 3, (x, y) => x + (y + 1));$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 3, (x, y) => x + (y + 1));$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 4, (x, y) => (1 + x) * (15 + y));$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(2, 4, (x, y) => (1 + x) * (15 + y));$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 1, (x, y) => x + 1);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 1, (x, y) => x + 1);$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 3, (x, y) => (1 + x) * (15 + y));$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 3, (x, y) => (1 + x) * (15 + y));$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 3, (x, y) => x + (y + 1));$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 3, (x, y) => x + (y + 1));$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 4, (x, y) => (1 + x) * (15 + y));$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(3, 4, (x, y) => (1 + x) * (15 + y));$/;"	V
matrix	testMatrix.js	/^      let matrix = new Matrix(4, 1, (x, y) => x + y + 2);$/;"	F
matrix	testMatrix.js	/^      let matrix = new Matrix(4, 1, (x, y) => x + y + 2);$/;"	V
matrixHowItShouldLookLike	testMatrix.js	/^        let matrixHowItShouldLookLike = new Matrix(4, 4, (x, y) => {$/;"	F
matrixHowItShouldLookLike	testMatrix.js	/^        let matrixHowItShouldLookLike = new Matrix(4, 4, (x, y) => {$/;"	V
matrixHowItShouldLookLike	testMatrix.js	/^      let matrixHowItShouldLookLike = new Matrix(3, 3);$/;"	V
matrixHowItShouldLookLike	testMatrix.js	/^      let matrixHowItShouldLookLike = new Matrix(4, 2);$/;"	V
matrixHowItShouldLookLike	testMatrix.js	/^      let matrixHowItShouldLookLike = new Matrix(4, 3);$/;"	V
napis	testMatrix.js	/^      let napis = new Matrix(3, 3, (x, y) => `(${x} ${y})`).toString();$/;"	F
napis	testMatrix.js	/^      let napis = new Matrix(3, 3, (x, y) => `(${x} ${y})`).toString();$/;"	V
output	index.js	/^		let output = '';$/;"	V
temp	testMatrix.js	/^      let temp = new Matrix(1, 1);$/;"	V
temp	testMatrix.js	/^      let temp = new Matrix(1, 1, (x, y) => `Matrix${x} ${y}`);$/;"	F
temp	testMatrix.js	/^      let temp = new Matrix(1, 1, (x, y) => `Matrix${x} ${y}`);$/;"	V
temp	testMatrix.js	/^      let temp = new Matrix(2, 2);$/;"	V
value	index.js	/^		let value = {$/;"	O
